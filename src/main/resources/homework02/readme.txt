ДЗ#2

Репозиторий:
https://github.com/alexei-28/Algorithms
Язык программирования: Java 1.8

- Скачайте проект и импортните в IntellIJ IDEA - https://www.jetbrains.com/ru-ru/idea/
- Точка входа приложения для ДЗ#2 - Main

Сделал 3 задачи из домашнего задания: /src/main/resources/homework02

1. Алгоритм Евклида поиска НОД
  1a. Алгоритм Евклида через вычитание
  Исходники:
  GCD_1a.java
  Для запуска теста (проверка длины строки) нужно раскомментировать только строку в файле
  Main.java:

    Tester tester = new Tester(new File(pathBase + File.separator + "2.GCD"), new GCD_1a());

  Время выполнения: 3 часа
  Оценка: +1 байт
  -----------------------------------------------------------------------------------------------

  1b. Алгоритм Евклида через остаток
  Исходники:
  GCD_1b.java

  Для запуска теста (проверка длины строки) нужно раскомментировать только строку в файле
  Main.java:

    Tester tester = new Tester(new File(pathBase + File.separator + "2.GCD"), new GCD_1b());

  Время выполнения: 1 час
  Оценка: +1 байт
  -----------------------------------------------------------------------------------------------

  Составить сравнительную таблицу времени работы алгоритмов для разных начальных данных
  src/main/resources/homework02/comparison_table.txt
  Оценка: +2 байта
  -----------------------------------------------------------------------------------------------

  Папка с начальными данными и результатами: /src/main/resources/homework02/2.GCD

  Итого: +4 байта.

  -----------------------------------------------------------------------------------------------
2.  Алгоритм возведения в степень
     2а. Итеративный (n умножений)
      Исходники:
      PowerN_2a.java
      Для запуска теста (проверка длины строки) нужно раскомментировать только строку в файле
      Main.java:

        Tester tester = new Tester(new File(pathBase + File.separator + "3.Power"), new PowerN_2a());

      Время выполнения: 3 часа
      Оценка: +1 байт
  -----------------------------------------------------------------------------------------------

      2b. Через степень двойки с домножением
      Исходники:
      PowerN_2b.java
      Для запуска теста (проверка длины строки) нужно раскомментировать только строку в файле
      Main.java:

       Tester tester = new Tester(new File(pathBase + File.separator + "3.Power"), new PowerN_2b());

      Время выполнения: 3 часа
      Оценка: +1 байт
  -----------------------------------------------------------------------------------------------

     Составить сравнительную таблицу времени работы алгоритмов для разных начальных данных
      src/main/resources/homework02/comparison_table.txt
      Оценка: +2 байта
  -----------------------------------------------------------------------------------------------
     Папка с начальными данными и результатами: /src/main/resources/homework02/3.Power

     Итого: +4 байта.

  -----------------------------------------------------------------------------------------------
4. Алгоритм поиска чисел Фибоначчи
    4a. Через рекурсию
      Исходники:
      Fibonacci_4a.java
      Для запуска теста (проверка длины строки) нужно раскомментировать только строку в файле
      Main.java:

        Tester tester = new Tester(new File(pathBase + File.separator + "4.Fibo"), new Fibonacci_4a());

      Время выполнения: 4 часа
      Оценка: +1 байт
  -----------------------------------------------------------------------------------------------

    4b.Через итерацию
      Исходники:
      Fibonacci_4b.java
      Для запуска теста (проверка длины строки) нужно раскомментировать только строку в файле
      Main.java:

      Tester tester = new Tester(new File(pathBase + File.separator + "4.Fibo"), new Fibonacci_4b());

      Время выполнения: 3 часа
      Оценка: +1 байт
  -----------------------------------------------------------------------------------------------

    4c. По формуле золотого сечения
          Исходники:
          Fibonacci_4c.java
          Для запуска теста (проверка длины строки) нужно раскомментировать только строку в файле
          Main.java:

          Tester tester = new Tester(new File(pathBase + File.separator + "4.Fibo"), new Fibonacci_4c());

          Время выполнения: 1 час
          Оценка:  +1 байт
  -----------------------------------------------------------------------------------------------

    4d. Через умножение матриц
          Исходники:
          Fibonacci_4d.java
          Для запуска теста (проверка длины строки) нужно раскомментировать только строку в файле
          Main.java:

          Tester tester = new Tester(new File(pathBase + File.separator + "4.Fibo"), new Fibonacci_4d());

          Время выполнения: 6 часов
          Оценка: +2 байт

     Составить сравнительную таблицу времени работы алгоритмов для разных начальных данных
      src/main/resources/homework02/comparison_table.txt
      Оценка: +2 байта
  -----------------------------------------------------------------------------------------------
      Папка с начальными данными и результатами: /src/main/resources/homework02/3.Fibo

      Итого: +7 байт.